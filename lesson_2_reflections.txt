What happens when you initialize a repository? Why do you need to do it?
A .git folder is created. You need to intialize to create a new repository.

How is the staging area different from the working directory and the repository? What value do you think it offers?
It is an intermediate place which has the names of the files that are changed and that the user wants to commit. Not all
files in a repository will be changed with each commit. The staging area records the files that are changed with that commit.

How can you use the staging area to make sure you have one commit per logical change?
You can do a git diff --staged to see the difference between what is in the staging area as compared to the last commit.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
It is helpful to have a separate branch when you want to add an experimental feature or you want to use a new language for
your project.

How do the diagrams help you visualize the branch structure?
A diagram shows you the sequence of changes and where the split in the branches happened. This will help you to know what features
are in your branch.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
The result of merging two branches is to incorporate the features of both branches into one. The resulting merge is 
now the master branch.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Pro: If there are several lines of code and several files, Git's automatic merging saves alot of time.
Con: Merging changes may not be straightforward and doing it manually when there are conflicts will ensure the intended
functionality.
